[{"C:\\react_pratice\\ch02\\hello-react\\src\\reportWebVitals.js":"1","C:\\react_pratice\\ch02\\hello-react\\src\\App.js":"2","C:\\react_pratice\\ch02\\hello-react\\src\\index.js":"3"},{"size":362,"mtime":1610891654173,"results":"4","hashOfConfig":"5"},{"size":7897,"mtime":1612076734430,"results":"6","hashOfConfig":"5"},{"size":1012,"mtime":1612071157014,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zcrh8l",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\react_pratice\\ch02\\hello-react\\src\\reportWebVitals.js",[],"C:\\react_pratice\\ch02\\hello-react\\src\\App.js",["15","16","17"],"import logo from './logo.svg';//SVG import \nimport './App.css';//css import\nimport { Fragment } from 'react';\n/*****************************\n JSX란? 자바스크립트의 확장문법(XML유사) , 가독성 증가 작성 용이\n => 브라우저 실행전 코드가 번들링 되는 과정에서 바벨을 사용하여 일반 자바스크립트 코드로 변환\n ex) functio App(){\n       return (\n        <div>\n        Hello<b>react</b>\n        </div>\n  ) \n  변형 후 function App(){\n    return React.createElement(\"div\",null,\"Hello \",React.createElement(\"b\",null,\"react\"));\n  }\n }\n *****************************/\n// function App() {//App 컴포넌트 생성 -> JSX 코드\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n// function App() {//에러 코드 why? JSX는 요소 여러개가 부모요소 하나에 감싸져 있지 않기 떄문\n//   return (\n//     <h1>리액트 안녕</h1>\n//     <h2>잘 동작하니?</h2>\n//   );\n// }\n//export default App;\n//div로 감싸서 해결 가능 (왜 div로 감싸야 되는걸까?)\n//  virtualDOM 에서 컴포너트 변화를 감지해낼떄 효율적으로 비교 가능하게 컴포넌트 내부는 하나의 DOM트리구조로 이루어져야되는 규칙이 존재하기 떄문\n// function App() {\n//   return (\n//     <div>\n//       <h1>리액트 안녕</h1>\n//       <h2>잘 동작하니?</h2>\n//     </div>\n//   );\n// }\n// export default App;\n//div를 사용하고 싶지 않을경우에는 Fragment 기능 사용(react v16이상)\n// function App() {\n//   return (\n//     <Fragment>\n//       <h1>리액트 안녕</h1>\n//       <h2>잘 동작하니?</h2>\n//     </Fragment>\n//   );\n// }\n// export default App;\n\n//JSX을 자바 스크립트 표현\n// function App() {\n//   const name = 'Hello 리액트';//한번 선언시 변경이 불가능한 상수 선언\n//   //let : 동적인 변수를 담을때 사용하는 키워드, var : scope가 함수단위\n//   function myFunc(){\n//     var a = 'hello';\n//     if(true){\n//       var a = 'bye';\n//       console.log(a);//bye\n//     }\n//     console.log(a);//bye\n//     //if문 내부에서 새로선언 했음에도 if문 밖에서 a 조회시 변경된 값이 나온다.\n//     //let, const로 해결\n//   }\n//   myFunc();\n//   function  myFunc2(){\n//     let a =1;\n//     if(true){\n//       let a= 2;\n//       console.log(a);//2\n//     }\n//     console.log(a);//1\n//     //if문 내부에서 선언된 값이 if문 밖에서 변경 x\n//     //let a = 1;\n//     //let a = 2;\n//     //const a = 1;\n//     //const a = 2;\n//     //불가능\n//   }\n//   myFunc2();\n//   return (\n//     <>\n//       <h1>{name}</h1>\n//       <h2>잘 동작하니?</h2>\n//     </>\n//   );\n// }\n// export default App;\n// if문 대신 조건부 연산자\n//JSX내부의 자바스크립트는 if문 사용 불가능 -> JSX 밖에서 if문을 사용하여 사전 값을 설정하거나, {}안에 조건부 연산자를 사용\n// function App() {\n//   // const name = '리액트';\n//   const name = '리웹트';\n//   return (\n//     <div>\n//       {name === '리액트' ? (\n//         <h1>리액트입니다.</h1>\n//       ) : (\n//         <h2>리액트가 아닙니다.</h2>\n//       )}\n//     </div>\n//   );\n// }\n// export default App;\n\n//AND 연산자(&&)를 사용한 조건부 렌더링\n// function App() {\n//   const name = '리웹트';\n//   //null  랜더링시 아무것도 보여주지 않는다.\n//   return (\n//     <div>\n//       {name === '리액트' ? \n//         <h1>리액트입니다.</h1> : null}\n//     </div>\n//   );\n// }\n// export default App;\n// function App() {\n//   //false 를 렌더링시 null과 같이 아무것도 나타나지 x , 단) 0은 예외적으로 화면에 나타난다\n//   const name = '리웹트';\n//   const number = 0;\n//   return (\n//     <div>\n//       {name === '리액트' && <h1>리액트입니다.</h1>}\n//       {number && <h1>내용.</h1>}\n//     </div>\n//   );\n// }\n// export default App;\n\n// undefined를 렌더링 하지 않기\n// function App() {\n//   const name = undefined;\n//   //return name;//JSX 오류\n//   //return name || '값이 undefined입니다';//OR 연산자로 오류 방지\n//   //return <div>값이 {name}입니다</div>;//JSX 내부에서 undefined 렌더링 가능\n//   return <div>{name || '리엑트'}</div>;//undefined 일떄 표시할 값 렌더링\n// }\n// export default App;\n\n//인라인 스타일링\n//스타일 적용시 문자열 형태가 아니라 객체형태로 넣어줘야 한다. 또한 background-color처럼 문자에 -가 있는경우에는 카멜표기법으로 작성해야 한다\n// function App() {  \n//   const name = '리액트';\n//   // const style = {//background-color는 카멜 표기법으로 표기\n//   //   backgroundColor : 'black',\n//   //   color : 'aqua',\n//   //   fontSize: '48px',//font-Size\n//   //   fontWeight : 'bold',//font-weight\n//   //   padding : 16 //단위를 생략 하면 px\n//   // };\n//   // return (\n//   //   <div style={style}>{name}</div>\n//   // );\n//   return (\n//     <div style={{//미리 선언하지 않고 style 지정\n//       backgroundColor : 'black',\n//       color : 'aqua',\n//       fontSize: '48px',//font-Size\n//       fontWeight : 'bold',//font-weight\n//       padding : 16 //단위를 생략 하면 px\n//     }}>{name}</div>\n//   );\n// }\n// export default App;\n\n//class 대신 clasName\n//JSX는 class 대신 className으로 설정을 해주어야 한다.\n// function App() {  \n//   const name = '리액트';\n//   return (//클래스로 해도 동작은 하지만 console창 경고가 뜬다.\n//     <div className = 'react'>{name}</div>\n//   );\n// }\n// export default App;\n\n//꼭 닫아야 되는 태그(닫지 않아도 되는 태그 : input 등)\n// function App() {  \n//   const name = '리액트'\n//   return (\n//     // <>\n//     //   <div className='react'>{name}\n//     //    <input>//리액트에선 꼭 닫지 않아도 되는 태그 사용시 오류\n//     //   </div>\n//     // </>\n    \n//     //self-closing 을 하거 나 닫아주어야 오류가 없다.\n//     <>\n//       <div className='react'>{name}\n//         <input></input>\n//         <input />\n//       </div>\n//     </>\n    \n//   );\n// }\n// export default App;\n\n// //JSX 주석\n// function App() {  \n//   const name = '리액트';\n//   return (\n//     <>\n//       {/* 주석 */}\n//       <div\n//         className='react' //시작태그를 여러줄로 할시 여기에 주석 가능\n//       >\n//         {name}\n//       </div>\n//       //단, 이런 주석이나 \n//       /* 이런 주석은 페이지에 그대로 나타난다. */\n//       <input />\n//     </>\n//   );\n// }\n// export default App;\n\n\n\n//ESLint : 문법 검사 도구 , 코드를 작성시 실수 할떄 에러, 경고 메시지를 VS Code 에디터에서 바로 확인 가능하게 해줌\n//Prettier : 코드 스타일 자동정리 도구 \nfunction App() {  \n  const name = '리액트';\n  return (\n    <>\n    {/* 이러한 에러는 ESlint에서 빨간에러로 뜨며 바로 고쳐줘야한다.\n    <h1>에러</h1>\n    <h2></h2>\n    */}\n      //잘못된 주석 {/* 이러한 오류는 초록색 줄로 표기되며 고치지 않아도 된다(ESLint경고문) */}\n      {/* .prettierrc 파일을 src 폴더 앞에 생성한뒤 다양한 코드스타일을 지정할수 있다 = prettier*/}\n      {/* 저장할떄 자동으로 코드 정리 = \n        1. VSCODE 환경설정 (설정)\n        2. format on save 검색\n        3. check\n      */}\n    </>\n\n  );\n}\nexport default App;\n\n\n","C:\\react_pratice\\ch02\\hello-react\\src\\index.js",[],{"ruleId":"18","severity":1,"message":"19","line":1,"column":8,"nodeType":"20","messageId":"21","endLine":1,"endColumn":12},{"ruleId":"18","severity":1,"message":"22","line":239,"column":9,"nodeType":"20","messageId":"21","endLine":239,"endColumn":13},{"ruleId":"23","severity":1,"message":"24","line":245,"column":8,"nodeType":"25","endLine":246,"endColumn":16},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'name' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal"]