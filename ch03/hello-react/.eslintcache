[{"C:\\react_pratice\\ch03\\hello-react\\src\\reportWebVitals.js":"1","C:\\react_pratice\\ch03\\hello-react\\src\\App.js":"2","C:\\react_pratice\\ch03\\hello-react\\src\\index.js":"3","C:\\react_pratice\\ch03\\hello-react\\src\\MyComponent.js":"4","C:\\react_pratice\\ch03\\hello-react\\src\\Counter.js":"5","C:\\react_pratice\\ch03\\hello-react\\src\\Say.js":"6"},{"size":362,"mtime":1610891654173,"results":"7","hashOfConfig":"8"},{"size":2012,"mtime":1613313186325,"results":"9","hashOfConfig":"8"},{"size":500,"mtime":1610891654173,"results":"10","hashOfConfig":"8"},{"size":4351,"mtime":1613310728485,"results":"11","hashOfConfig":"8"},{"size":7312,"mtime":1613314878590,"results":"12","hashOfConfig":"8"},{"size":2585,"mtime":1613315615071,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jlc36u",{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\react_pratice\\ch03\\hello-react\\src\\reportWebVitals.js",[],"C:\\react_pratice\\ch03\\hello-react\\src\\App.js",["28","29","30"],"import logo from './logo.svg';\nimport './App.css';\nimport React, {Component} from 'react';\nimport MyComponent from './MyComponent';\nimport Counter from './Counter';\n\n// 컴포넌트 선언\n//방법 2가지 1. 함수형 2. class형(차이점 : 클레스형 컴포넌트인 경우 state 기능및 라이프 사이클 기능 사용 가능, 임의 메소드 정의 가능)\n//ESP 6 이후부터 자바스크립트에서 클레스 선언 가능 이전에는 prototype으로 선언\n//class형 컴포넌트 선언\n//함수형 컴포넌트 장점 : 선언에 용이함(클래스형보다 쉬움), 메모리 자원또한 덜 사용(프로젝트 빌드 베포시에도 결과물 크기가 작지만 별 차이 없음)\n//단점 state와 라이프사이클 API 사용이 불가능 => 16.8버전인 Hooks기능 도입후 해결\n\n\n// class  App extends Component{\n//   render(){\n//     const name = 'react';\n//     return <div className='react'>{name}</div>\n//   }\n// }\n\n// export default App;\n\n//모듈 불러오기\n//props 값 지정하기 , name 속성값을 지정해서 줄수 있다.\n// const App = () =>{\n//   return <MyComponent name='React'/>;\n// }\n\n// export default App;\n//default props = props 값을 따로 지정하지 않았을떄 보여주는 기본값\n// const App = () =>{\n//   return <MyComponent/>;\n// }\n\n// export default App;\n\n//태그 사이의 내용을 보여주는 children\n// 컴포넌트 태그 사이의 내용을 보여주는 props가존재 = children\n//MyComponent 태그 사이에 작성한 리액트 문자열을  MyComponent 내부에서 보여주려면 props.children 값을 보여주어야 한다.\n\n// const App = () =>{\n//   return <MyComponent>리액트</MyComponent>;\n// }\n// const App = () =>{\n//   //return <MyComponent name = {2}></MyComponent>;//크롬 콘솔 에러 => propsType이 문자열이 아니기 때문\n//   return <MyComponent name = '리액트' favoriteNumber = {2}></MyComponent>;\n// }\n// export default App;\nconst App = () =>{\n  return <Counter />;\n}\nexport default App;","C:\\react_pratice\\ch03\\hello-react\\src\\index.js",[],["31","32"],"C:\\react_pratice\\ch03\\hello-react\\src\\MyComponent.js",["33","34"],"C:\\react_pratice\\ch03\\hello-react\\src\\Counter.js",[],"C:\\react_pratice\\ch03\\hello-react\\src\\Say.js",[],{"ruleId":"35","severity":1,"message":"36","line":1,"column":8,"nodeType":"37","messageId":"38","endLine":1,"endColumn":12},{"ruleId":"35","severity":1,"message":"39","line":3,"column":16,"nodeType":"37","messageId":"38","endLine":3,"endColumn":25},{"ruleId":"35","severity":1,"message":"40","line":4,"column":8,"nodeType":"37","messageId":"38","endLine":4,"endColumn":19},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"35","severity":1,"message":"45","line":6,"column":10,"nodeType":"37","messageId":"38","endLine":6,"endColumn":15},{"ruleId":"35","severity":1,"message":"46","line":9,"column":7,"nodeType":"37","messageId":"38","endLine":9,"endColumn":13},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'MyComponent' is defined but never used.","no-native-reassign",["47"],"no-negated-in-lhs",["48"],"'twice' is defined but never used.","'triple' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]